/const { PREFIX } = require(`${BASE_DIR}/config`);
const { DangerError } = require(`${BASE_DIR}/errors`);
const { evaluate, parse } = require("mathjs");

// Lista branca de fun√ß√µes e constantes
const allowedFunctions = ["sin", "cos", "tan", "sqrt", "log", "abs", "exp"];
const allowedConstants = ["pi", "e"];
const maxExpressionLength = 100; // Limite para evitar abuso

module.exports = {
  name: "calculadora",
  description: "Calculadora cient√≠fica segura com fun√ß√µes, m√∫ltiplas express√µes e prote√ß√£o contra inje√ß√£o.",
  commands: ["calculadora", "calc", "calcular", "math", "scientific"],
  usage: `${PREFIX}calculadora 2 + 2; sin(pi/2)`,

  handle: async ({ args, sendReply }) => {
    if (!args.length) {
      throw new DangerError(
        `Voc√™ precisa informar uma express√£o matem√°tica.\nExemplo: ${PREFIX}calculadora 2 + 2\nOperadores: + - * / ^ ( )`
      );
    }

    const rawExpression = args.join(" ");

    if (rawExpression.length > maxExpressionLength) {
      throw new DangerError(`Express√£o muito longa! Limite de ${maxExpressionLength} caracteres.`);
    }

    // Separar m√∫ltiplas express√µes
    const expressions = rawExpression.split(";").map(e => e.trim()).filter(e => e);

    if (!expressions.length) {
      throw new DangerError("N√£o foi encontrada nenhuma express√£o v√°lida.");
    }

    let reply = `üßÆ *CALCULADORA*\n\n`;

    for (let expr of expressions) {
      try {
        // Sanitiza√ß√£o rigorosa: remove tudo que n√£o seja permitido
        const safeExpr = expr
          .replace(/[^0-9+\-*/^()., ]/gi, "") // remove caracteres suspeitos
          .replace(/\s+/g, ""); // remove espa√ßos extras

        // Parser seguro do mathjs
        const node = parse(safeExpr);

        // Verifica√ß√£o de cada fun√ß√£o utilizada
        node.traverse(function (node) {
          if (node.isSymbolNode) {
            const name = node.name.toLowerCase();
            if (!allowedFunctions.includes(name) && !allowedConstants.includes(name) && !/^([0-9]+)$/.test(name)) {
              throw new DangerError(`Fun√ß√£o ou constante n√£o permitida: ${name}`);
            }
          }
        });

        const result = evaluate(safeExpr);

        if (typeof result !== "number" || !isFinite(result)) {
          reply += `‚ö†Ô∏è Express√£o inv√°lida ou resultado indefinido: ${expr}\n\n`;
        } else {
          reply += `üî∏ *Express√£o:* ${expr}\n`;
          reply += `üîπ *Resultado:* ${result}\n\n`;
        }
      } catch (error) {
        reply += `‚ùå Erro ao calcular "${expr}": ${error.message}\n\n`;
      }
    }

    reply += `_C√°lculos realizados com sucesso!_`;
    await sendReply(reply);
  },
};
