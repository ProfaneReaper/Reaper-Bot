const { errorLog } = require(`${BASE_DIR}/utils/logger`);
const { PREFIX } = require(`${BASE_DIR}/config`);
const { InvalidParameterError } = require(`${BASE_DIR}/errors`);

module.exports = {
  name: "validartitulo",
  description: "Valida um n√∫mero de T√≠tulo de Eleitor",
  commands: ["titulo", "validartitulo"],
  usage: `${PREFIX}titulo <n√∫mero do t√≠tulo>\nExemplo: ${PREFIX}titulo 123456789012`,
  /**
   * @param {CommandHandleProps} props
   * @returns {Promise<void>}
   */
  handle: async ({
    args,
    remoteJid,
    sendErrorReply,
    sendWaitReply,
    sendSuccessReact,
    sendReply,
  }) => {
    if (args.length < 1) {
      return sendErrorReply("Por favor, informe um t√≠tulo. Exemplo: " + this.usage);
    }

    const titulo = args[0];
    await sendWaitReply("Validando T√≠tulo de Eleitor...");

    try {
      const cleanedTitulo = titulo.replace(/\D/g, '');
      
      if (cleanedTitulo.length !== 12) {
        throw new InvalidParameterError('T√≠tulo deve conter 12 d√≠gitos');
      }

      // Extrai os d√≠gitos verificadores
      const digitoUF = parseInt(cleanedTitulo.substring(10, 12));
      const tituloSemDV = cleanedTitulo.substring(0, 10);
      
      // Valida√ß√£o do T√≠tulo de Eleitor
      let sum = 0;
      
      // C√°lculo do primeiro d√≠gito verificador (posi√ß√£o 9)
      for (let i = 0; i < 8; i++) {
        sum += parseInt(tituloSemDV.charAt(i)) * (9 - i);
      }
      const dv1 = sum % 11;
      const checkDV1 = dv1 < 10 ? dv1 : 0;
      
      if (checkDV1 !== parseInt(tituloSemDV.charAt(8))) {
        throw new InvalidParameterError('T√≠tulo inv√°lido (primeiro d√≠gito verificador incorreto)');
      }

      // C√°lculo do d√≠gito UF (posi√ß√µes 10-11)
      if (digitoUF < 1 || digitoUF > 28) {
        throw new InvalidParameterError('C√≥digo de UF inv√°lido no t√≠tulo');
      }

      const formattedTitulo = cleanedTitulo.replace(/(\d{4})(\d{4})(\d{4})/, '$1 $2 $3');
      
      const resultado = `
üó≥Ô∏è *Resultado da valida√ß√£o de T√≠tulo de Eleitor* üó≥Ô∏è
üî¢ *T√≠tulo:* ${formattedTitulo}
‚úÖ *Status:* V√°lido
üìå *Observa√ß√£o:* A valida√ß√£o √© apenas matem√°tica. N√£o verifica exist√™ncia no TSE.
      `.trim();

      await sendSuccessReact();
      await sendReply(resultado);
    } catch (error) {
      errorLog(`Erro na valida√ß√£o de t√≠tulo ${titulo}: ${error.message}`);
      sendErrorReply(error.message || "T√≠tulo de Eleitor inv√°lido. Verifique o n√∫mero e tente novamente.");
    }
  },
};
